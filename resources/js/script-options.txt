    <script>
        (() => {
            /* helpers */
            const qs = s => document.querySelector(s);
            const qsa = s => Array.from(document.querySelectorAll(s));
            const show = el => el.classList.remove('d-none');
            const hide = el => el.classList.add('d-none');

            let current = 1;
            const total = 4;
            const progressEl = qs('#progress'),
                stepHint = qs('#stepHint');

            // satuan (server → js)
            const units = @json($units->map(fn($u) => ['id' => $u->id, 'label' => $u->symbol ? "{$u->name} ({$u->symbol})" : $u->name]));

            function goto(step) {
                current = step;
                qsa('section[data-page]').forEach(sec => Number(sec.dataset.page) === step ? show(sec) : hide(sec));
                qsa('.step').forEach(s => {
                    const n = Number(s.dataset.step);
                    s.classList.toggle('active', n === step);
                    s.classList.toggle('done', n < step);
                });
                progressEl.style.width = `${(step-1)/(total-1)*100}%`;
                stepHint.textContent = `Langkah ${step} dari ${total}`;
                qs('#btnPrev').disabled = (step === 1);
                if (step === total) {
                    hide(qs('#btnNext'));
                    show(qs('#btnSubmit'));
                } else {
                    show(qs('#btnNext'));
                    hide(qs('#btnSubmit'));
                }
            }

            // validasi field required dalam 1 step
            function validateStep(step) {
                const sec = document.querySelector(`section[data-page="${step}"]`);
                if (!sec) return true;
                const req = Array.from(sec.querySelectorAll('[required]'));
                let ok = true,
                    first = null;
                req.forEach(el => {
                    el.classList.remove('is-invalid');
                    const empty = (el.tagName === 'SELECT') ? (el.value === '') :
                        (el.type === 'number') ? (el.value === '' || isNaN(+el.value)) :
                        (el.value.trim() === '');
                    if (empty) {
                        ok = false;
                        first ??= el;
                        el.classList.add('is-invalid');
                    }
                });
                if (!ok && first) {
                    first.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                    first.focus({
                        preventScroll: true
                    });
                }
                return ok;
            }

            /* cascading */
            const satkerEl = qs('#satker'),
                ppkEl = qs('#ppk'),
                paketEl = qs('#paket'),
                lokasiEl = qs('#lokasi_auto');

            // === Penyedia Jasa (readonly + sinkron ke hidden kalau ada) ===
            const penyediaEl = qs('#penyedia_jasa_auto');
            const setPenyedia = (val = '') => {
                if (penyediaEl) penyediaEl.value = val || '';
                const h = qs('#penyedia_jasa_hidden');
                if (h) h.value = penyediaEl?.value || '';
            };

            const clearSelect = (el, ph, dis = true) => {
                el.innerHTML = `<option value="">${ph}</option>`;
                el.disabled = !!dis;
            };
            const fetchJson = async (url) => {
                const r = await fetch(url, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                if (!r.ok) throw new Error(url);
                return r.json();
            };

            // builder khusus paket: selipkan lokasi & penyedia_jasa sebagai data-attribute
            const fillPaketSelect = (el, list) => {
                clearSelect(el, '-- Pilih Paket --', false);
                list.forEach(it => {
                    const o = document.createElement('option');
                    o.value = it.id;
                    o.textContent = it.nama_paket;
                    o.dataset.lokasi = it.lokasi || '';
                    o.dataset.penyediaJasa = it.penyedia_jasa || '';
                    el.appendChild(o);
                });
            };

            // generic untuk PPK
            const fillPPKSelect = (el, list) => {
                clearSelect(el, '-- Pilih PPK --', false);
                list.forEach(it => {
                    const o = document.createElement('option');
                    o.value = it.id;
                    o.textContent = it.name;
                    el.appendChild(o);
                });
            };

            satkerEl.addEventListener('change', async () => {
                clearSelect(ppkEl, '-- Memuat PPK ...', true);
                clearSelect(paketEl, '-- Pilih Satker & PPK --', true);
                lokasiEl.value = '';
                setPenyedia('');
                resetSteps2to4();

                const sid = satkerEl.value;
                if (!sid) {
                    clearSelect(ppkEl, '-- Pilih Satker dulu --', true);
                    return;
                }

                try {
                    const ppks = await fetchJson(`/api/ppks?satker_id=${sid}`);
                    fillPPKSelect(ppkEl, ppks);
                } catch {
                    clearSelect(ppkEl, '⚠️ Gagal memuat PPK', true);
                }
            });

            ppkEl.addEventListener('change', async () => {
                clearSelect(paketEl, '-- Memuat Paket ...', true);
                lokasiEl.value = '';
                setPenyedia('');
                resetSteps2to4();

                const sid = satkerEl.value,
                    pid = ppkEl.value;
                if (!sid || !pid) {
                    clearSelect(paketEl, '-- Pilih Satker & PPK --', true);
                    return;
                }

                try {
                    const pkgs = await fetchJson(`/api/packages?satker_id=${sid}&ppk_id=${pid}`);
                    fillPaketSelect(paketEl, pkgs); // ← berisi data-lokasi & data-penyedia-jasa
                } catch {
                    clearSelect(paketEl, '⚠️ Gagal memuat Paket', true);
                }
            });

            paketEl.addEventListener('change', async () => {
                lokasiEl.value = '';
                setPenyedia('');
                resetSteps2to4();

                const pkg = paketEl.value;
                if (!pkg) return;

                // Ambil langsung dari <option> terpilih (tanpa fetch /api/package/{id})
                const opt = paketEl.selectedOptions[0];
                if (opt) {
                    lokasiEl.value = opt.dataset.lokasi || '';
                    setPenyedia(opt.dataset.penyediaJasa || '');
                }

                try {
                    const cats = await fetchJson('/api/job-cats');
                    renderStepsForCategories(cats, pkg);
                } catch (e) {
                    console.error(e);
                }
            });

            /* render step 2–4 */
            function resetSteps2to4() {
                qs('#lblStep2').textContent = 'Saluran';
                qs('#bodyStep2').innerHTML = '';
                qs('#lblStep3').textContent = 'Bangunan dan Sadap';
                qs('#bodyStep3').innerHTML = '';
                qs('#lblStep4').textContent = 'Bangunan Pelengkap';
                qs('#bodyStep4').innerHTML = '';
            }

            function renderStepsForCategories(cats, pkgId) {
                cats.sort((a, b) => (a.sort_order ?? 0) - (b.sort_order ?? 0));
                const m = [{
                    lbl: '#lblStep2',
                    body: '#bodyStep2'
                }, {
                    lbl: '#lblStep3',
                    body: '#bodyStep3'
                }, {
                    lbl: '#lblStep4',
                    body: '#bodyStep4'
                }];
                cats.slice(0, 3).forEach((cat, i) => {
                    qs(m[i].lbl).textContent = cat.name;
                    renderCategoryFixed(qs(m[i].body), cat, i, pkgId);
                });
            }

            // tampilkan semua item (Volume & Satuan REQUIRED)
            function renderCategoryFixed(container, cat, idx, pkgId) {
                container.innerHTML = `
      <div class="mb-2"><h2 class="h6 mb-2">Jenis: ${cat.name}</h2></div>
      <input type="hidden" name="details[${idx}][category_id]" value="${cat.id}">
      <div class="item-list" data-list></div>
      <div class="alert alert-info d-none mt-2" data-empty>Belum ada item pekerjaan untuk jenis ini.</div>
    `;
                const list = container.querySelector('[data-list]'),
                    empty = container.querySelector('[data-empty]');

                fetchJson(`/api/items?package_id=${pkgId}&job_category_id=${cat.id}`)
                    .then(items => {
                        if (!items.length) {
                            empty.classList.remove('d-none');
                            return;
                        }
                        items.forEach((it, rowIdx) => {
                            const card = document.createElement('div');
                            card.className = 'item-card mb-2';
                            card.innerHTML = `
            <div class="item-title">${it.name}</div>
            <input type="hidden" name="details[${idx}][rows][${rowIdx}][item_id]" value="${it.id}">
            <div class="row g-2">
              <div class="col-12 col-md-3">
                <label class="form-label">Volume</label>
                <input type="number" step="0.01" min="0" class="form-control" name="details[${idx}][rows][${rowIdx}][volume]" required>
              </div>
              <div class="col-12 col-md-4 col-lg-3">
                <label class="form-label">Satuan</label>
                <select class="form-select" name="details[${idx}][rows][${rowIdx}][satuan_id]" required>
                  <option value="">-- Pilih --</option>
                  ${units.map(u=>`<option value="${u.id}">${u.label}</option>`).join('')}
                </select>
              </div>
              <div class="col-12 col-md-5 col-lg-6">
                <label class="form-label">Keterangan</label>
                <input class="form-control" name="details[${idx}][rows][${rowIdx}][keterangan]" placeholder="Opsional">
              </div>
            </div>
          `;
                            const satSel = card.querySelector('select[name*="[satuan_id]"]');
                            if (it.default_unit_id) satSel.value = String(it.default_unit_id);
                            list.appendChild(card);
                        });
                    })
                    .catch(e => {
                        console.error(e);
                        empty.textContent = 'Gagal memuat item';
                        empty.classList.remove('d-none');
                    });
            }

            /* nav */
            document.getElementById('btnPrev').addEventListener('click', () => goto(Math.max(1, current - 1)));

            document.getElementById('btnNext').addEventListener('click', () => {
                if (current === 1) {
                    if (!validateStep(1)) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Lengkapi Data Awal',
                            text: 'Isi Satker, PPK, Paket, Nama, dan Jabatan.'
                        });
                        return;
                    }
                } else if (current >= 2 && current <= 4) {
                    if (!validateStep(current)) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Lengkapi Item',
                            text: 'Isi Volume & Satuan untuk semua item pada langkah ini.'
                        });
                        return;
                    }
                }
                goto(Math.min(total, current + 1));
            });

            qsa('.step').forEach(s => s.addEventListener('click', () => {
                const t = Number(s.dataset.step);
                if (t < current) goto(t);
                else if (t > current && current === 1) document.getElementById('btnNext').click();
            }));

            // validasi akhir saat submit
            document.getElementById('formMain').addEventListener('submit', (e) => {
                for (let s = 1; s <= 4; s++) {
                    if (!validateStep(s)) {
                        e.preventDefault();
                        goto(s);
                        Swal.fire({
                            icon: 'warning',
                            title: 'Form belum lengkap',
                            text: `Periksa kembali langkah ${s}.`
                        });
                        return;
                    }
                }
                // optional: pastikan ada minimal satu item-card total
                if (document.querySelectorAll('.item-card').length === 0) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Belum ada Item',
                        text: 'Paket ini belum memiliki item pekerjaan.'
                    });
                }
            });

            // init
            goto(1);

            @if (session('status'))
                Swal.fire({
                    icon: 'success',
                    title: 'Sukses',
                    text: @json(session('status'))
                });
            @endif
        })();
    </script>